#!/usr/bin/env tsx

import { GemArticleService } from '../src/lib/services/gemArticleService.js';
import { ArticleTrackingService } from '../src/lib/database/articleTrackingSchema.js';

/**
 * Script de prueba para verificar el flujo optimizado de GEMs
 * Este script prueba cada GEM individualmente y luego el flujo completo
 */

class GemFlowTester {
  private gemService: GemArticleService;
  private trackingService: ArticleTrackingService;

  constructor(apiKey: string) {
    this.trackingService = new ArticleTrackingService(null);
    this.gemService = new GemArticleService(apiKey, this.trackingService);
  }

  async testGem1() {
    console.log('\nüß™ Probando GEM 1 - Planificador de Art√≠culo');
    console.log('='.repeat(50));

    const testTopic =
      'C√≥mo la IA est√° transformando el marketing digital para PYMES en 2025';

    try {
      const result = await this.gemService['executeGem1'](testTopic);

      console.log('‚úÖ GEM 1 ejecutado exitosamente');
      console.log(`üìù T√≠tulo: ${result.title}`);
      console.log(`üîë Keyword principal: ${result.keywords[0]}`);
      console.log(`üìä Palabras totales: ${result.targetLength}`);
      console.log(`üìã Secciones: ${result.sections.length}`);

      result.sections.forEach((section, index) => {
        console.log(
          `   ${index + 1}. ${section.title} (${section.targetLength} palabras)`
        );
      });

      return result;
    } catch (error) {
      console.error('‚ùå Error en GEM 1:', error);
      throw error;
    }
  }

  async testGem2(gem1Result: any) {
    console.log('\nüß™ Probando GEM 2 - Investigador de Secci√≥n');
    console.log('='.repeat(50));

    try {
      const results = await this.gemService['executeGem2'](gem1Result);

      console.log('‚úÖ GEM 2 ejecutado exitosamente');
      console.log(`üîç Secciones investigadas: ${results.length}`);

      results.forEach((result, index) => {
        console.log(
          `   ${index + 1}. ${result.sectionId}: ${result.insights.length} insights`
        );
      });

      return results;
    } catch (error) {
      console.error('‚ùå Error en GEM 2:', error);
      throw error;
    }
  }

  async testGem3(gem1Result: any, gem2Results: any[]) {
    console.log('\nüß™ Probando GEM 3 - Redactor Final');
    console.log('='.repeat(50));

    try {
      const result = await this.gemService['executeGem3'](
        gem1Result,
        gem2Results
      );

      console.log('‚úÖ GEM 3 ejecutado exitosamente');
      console.log(`üìù Palabras generadas: ${result.wordCount}`);
      console.log(
        `üìä Puntuaci√≥n de legibilidad: ${result.readabilityScore.toFixed(1)}`
      );
      console.log(
        `üîç Optimizado para SEO: ${result.seoOptimized ? 'S√≠' : 'No'}`
      );

      // Mostrar preview del contenido
      const preview = result.fullArticle.substring(0, 200) + '...';
      console.log(`üìÑ Preview: ${preview}`);

      return result;
    } catch (error) {
      console.error('‚ùå Error en GEM 3:', error);
      throw error;
    }
  }

  async testGem4(articleContent: string, gem1Result: any) {
    console.log('\nüß™ Probando GEM 4 - Generador de Frontmatter');
    console.log('='.repeat(50));

    try {
      const result = await this.gemService['executeGem4'](
        articleContent,
        gem1Result
      );

      console.log('‚úÖ GEM 4 ejecutado exitosamente');
      console.log(`üè∑Ô∏è  Categor√≠a: ${result.frontmatter.category}`);
      console.log(`üìä Tags: ${result.frontmatter.tags.join(', ')}`);
      console.log(`‚úÖ Validaci√≥n pasada: ${result.validationPassed}`);

      if (result.validationErrors && result.validationErrors.length > 0) {
        console.log(
          `‚ö†Ô∏è  Errores de validaci√≥n: ${result.validationErrors.join(', ')}`
        );
      }

      return result;
    } catch (error) {
      console.error('‚ùå Error en GEM 4:', error);
      throw error;
    }
  }

  async testCompleteFlow() {
    console.log('\nüöÄ Probando Flujo Completo de GEMs');
    console.log('='.repeat(50));

    const testTopic =
      'Automatizaci√≥n inteligente: 5 herramientas que toda empresa deber√≠a usar';

    try {
      console.log(`üìù Tema de prueba: ${testTopic}`);

      const startTime = Date.now();

      // Ejecutar flujo completo
      const tracking = await this.gemService.createArticle(testTopic);

      const endTime = Date.now();
      const duration = (endTime - startTime) / 1000;

      console.log('‚úÖ Flujo completo ejecutado exitosamente');
      console.log(`‚è±Ô∏è  Tiempo total: ${duration.toFixed(2)} segundos`);
      console.log(`üÜî Tracking ID: ${tracking.id}`);

      return tracking;
    } catch (error) {
      console.error('‚ùå Error en flujo completo:', error);
      throw error;
    }
  }

  async runAllTests() {
    console.log('üß™ INICIANDO PRUEBAS DEL FLUJO OPTIMIZADO DE GEMs');
    console.log('='.repeat(60));

    try {
      // Prueba individual de cada GEM
      const gem1Result = await this.testGem1();
      const gem2Results = await this.testGem2(gem1Result);
      const gem3Result = await this.testGem3(gem1Result, gem2Results);
      await this.testGem4(gem3Result.fullArticle, gem1Result);

      // Prueba del flujo completo
      await this.testCompleteFlow();

      console.log('\nüéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE');
      console.log('='.repeat(60));
      console.log(
        '‚úÖ El flujo optimizado de GEMs est√° funcionando correctamente'
      );
      console.log('‚úÖ Los prompts est√°n generando resultados v√°lidos');
      console.log('‚úÖ La validaci√≥n de frontmatter funciona');
      console.log('‚úÖ El sistema est√° listo para producci√≥n');
    } catch (error) {
      console.error('\n‚ùå ERROR EN LAS PRUEBAS');
      console.error('='.repeat(60));
      console.error('Error:', error);
      process.exit(1);
    }
  }
}

// Funci√≥n principal
async function main() {
  const apiKey = process.env.GEMINI_API_KEY;

  if (!apiKey) {
    console.error('‚ùå Error: GEMINI_API_KEY no est√° configurada');
    console.log('Config√∫rala en tu archivo .env');
    process.exit(1);
  }

  const tester = new GemFlowTester(apiKey);
  await tester.runAllTests();
}

// Ejecutar si es el archivo principal
if (require.main === module) {
  main().catch(console.error);
}

export { GemFlowTester };
