#!/usr/bin/env tsx

import { execSync } from 'child_process';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// Cargar variables de entorno
dotenv.config();

console.log('üöÄ Probando Dashboard de Automatizaci√≥n');
console.log('='.repeat(50));

// Verificar configuraci√≥n
async function checkConfiguration() {
  console.log('üîß Verificando configuraci√≥n...');

  // Verificar archivo .env
  const envPath = path.join(process.cwd(), '.env');
  try {
    await fs.access(envPath);
    console.log('‚úÖ Archivo .env encontrado');
  } catch {
    console.log('‚ö†Ô∏è  Archivo .env no encontrado');
    console.log('   Ejecuta: pnpm env:setup');
    return false;
  }

  // Verificar variables de entorno
  const requiredVars = ['GEMINI_API_KEY', 'DATABASE_PUBLIC_URL'];
  const missingVars = requiredVars.filter((varName) => !process.env[varName]);

  if (missingVars.length > 0) {
    console.log('‚ö†Ô∏è  Variables de entorno faltantes:', missingVars.join(', '));
    console.log(
      '   Aseg√∫rate de que el archivo .env est√© configurado correctamente'
    );
    return false;
  }

  console.log('‚úÖ Configuraci√≥n verificada');
  return true;
}

try {
  // Verificar configuraci√≥n
  const configOk = await checkConfiguration();
  if (!configOk) {
    console.log(
      '\n‚ùå Configuraci√≥n incompleta. Por favor, configura las variables de entorno.'
    );
    process.exit(1);
  }

  // Verificar que el servidor est√© corriendo
  console.log('üìã Verificando servidor...');
  const response = await fetch(
    'http://localhost:4321/api/articles/create-automatic',
    {
      method: 'GET',
    }
  );

  if (response.ok) {
    console.log('‚úÖ Servidor funcionando correctamente');
  } else {
    console.log('‚ö†Ô∏è  Servidor respondi√≥ con estado:', response.status);
  }

  // Probar creaci√≥n de art√≠culo
  console.log('\nüìù Probando creaci√≥n de art√≠culo...');
  const createResponse = await fetch(
    'http://localhost:4321/api/articles/create-automatic',
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        topic: 'Estrategias de marketing digital para 2025',
        apiKey: 'demo-key',
      }),
    }
  );

  if (createResponse.ok) {
    const result = await createResponse.json();
    console.log('‚úÖ Art√≠culo creado exitosamente');
    console.log('   ID:', result.articleId);
    console.log('   Mensaje:', result.message);

    // Probar SSE
    if (result.articleId) {
      console.log('\nüì° Probando SSE...');
      console.log(
        '   URL:',
        `http://localhost:4321/api/articles/status/${result.articleId}`
      );
      console.log(
        '   Puedes abrir esta URL en el navegador para ver los eventos SSE'
      );
    }
  } else {
    const error = await createResponse.text();
    console.log('‚ùå Error creando art√≠culo:', error);
  }

  // Verificar dashboard
  console.log('\nüåê Verificando dashboard...');
  const dashboardResponse = await fetch(
    'http://localhost:4321/automation-dashboard'
  );

  if (dashboardResponse.ok) {
    console.log('‚úÖ Dashboard accesible');
    console.log('   URL: http://localhost:4321/automation-dashboard');
  } else {
    console.log('‚ùå Error accediendo al dashboard:', dashboardResponse.status);
  }

  console.log('\nüéâ Pruebas completadas');
  console.log('\nüìã Pr√≥ximos pasos:');
  console.log('   1. Abre http://localhost:4321/automation-dashboard');
  console.log('   2. Introduce un tema y observa el proceso en tiempo real');
  console.log('   3. Verifica los logs y el progreso de las GEMs');
} catch (error) {
  console.error('‚ùå Error en las pruebas:', error);
  console.log('\nüí° Aseg√∫rate de que:');
  console.log('   - El servidor est√© corriendo (pnpm dev)');
  console.log('   - La base de datos est√© configurada (pnpm railway:setup)');
  console.log(
    '   - Las variables de entorno est√©n configuradas (pnpm env:setup)'
  );
}
