---
export interface Props {
  post?: any; // Para artículos de blog
  service?: any; // Para páginas de servicios
  faqs?: Array<{ question: string; answer: string }>; // Para FAQPage
}

const { post, service, faqs } = Astro.props;

const organizationSchema = {
  "@context": "https://schema.org",
  "@type": "Organization",
  name: "IA Punto",
  url: "https://www.iapunto.com/",
  logo: "https://res.cloudinary.com/dkb9jfet8/image/upload/v1741038442/logo-v3-cuadrado_seljkv.jpg",
  description:
    "Soluciones de Inteligencia Artificial para optimizar procesos empresariales: marketing digital, automatización, desarrollo web y consultoría estratégica.",
  address: {
    "@type": "PostalAddress",
    streetAddress: "Krr 16D #2-14",
    addressLocality: "Bucaramanga",
    addressRegion: "Santander",
    postalCode: "680001",
    addressCountry: "CO",
  },
  contactPoint: {
    "@type": "ContactPoint",
    telephone: "+57-316-376-9935",
    contactType: "Ventas y Soporte técnico",
  },
};

let combinedSchema: any[] = [organizationSchema];

if (post) {
  const articleSchema = {
    "@context": "https://schema.org",
    "@type": "Article",
    headline: post.data.title,
    image: post.data.cover,
    datePublished: post.data.pubDate.toISOString(),
    dateModified: post.data.pubDate.toISOString(),
    author: {
      "@type": "Person",
      name: post.data.author.name,
    },
    publisher: {
      "@type": "Organization",
      name: organizationSchema.name,
      logo: {
        "@type": "ImageObject",
        url: organizationSchema.logo,
      },
    },
    description: post.data.description,
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": Astro.url.href,
    },
  };
  combinedSchema.push(articleSchema);
}

if (service) {
  const serviceSchema = {
    "@context": "https://schema.org",
    "@type": "Service",
    name: service.title,
    description: service.hero?.description || service.title,
    serviceType: service.title,
    provider: {
      "@type": "Organization",
      name: organizationSchema.name,
      url: organizationSchema.url,
      logo: organizationSchema.logo,
    },
    areaServed: {
      "@type": "Country",
      name: "Colombia",
    },
    offers: service.pricing && service.pricing.length > 0 ? service.pricing.map((section: any) => ({
      "@type": "Offer",
      name: section.title,
      price: section.plans && section.plans[0]?.price,
      priceCurrency: "COP",
      description: section.plans && section.plans[0]?.features?.join(", "),
      url: Astro.url.href,
    })) : undefined,
    image: service.hero?.image,
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": Astro.url.href,
    },
  };
  combinedSchema.push(serviceSchema);
}

if (faqs && faqs.length > 0) {
  const faqSchema = {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    mainEntity: faqs.map((faq) => ({
      "@type": "Question",
      name: faq.question,
      acceptedAnswer: {
        "@type": "Answer",
        text: faq.answer,
      },
    })),
  };
  combinedSchema.push(faqSchema);
}
---

<script type="application/ld+json">
  {JSON.stringify(combinedSchema.length === 1 ? combinedSchema[0] : combinedSchema)}
</script>