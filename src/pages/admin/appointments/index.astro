---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { PostgresAppointmentService } from '../../../lib/database/postgresAppointmentService';
import { Client } from 'pg';
import { AppointmentStatus } from '../../../lib/database/postgresSchema';

// Configurar conexi√≥n a la base de datos
const client = new Client({
  connectionString: process.env.DATABASE_PUBLIC_URL,
});

let appointments = [];
let stats = {
  total: 0,
  pending: 0,
  confirmed: 0,
  cancelled: 0,
  completed: 0,
};

try {
  await client.connect();
  const appointmentService = new PostgresAppointmentService(client);

  // Obtener todas las citas directamente de la base de datos
  const appointmentsResult = await client.query(`
    SELECT * FROM appointments 
    ORDER BY appointment_date DESC, appointment_time DESC
  `);
  appointments = appointmentsResult.rows;

  // Obtener estad√≠sticas
  const statsResult = await client.query(`
    SELECT 
      COUNT(*) as total,
      COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
      COUNT(CASE WHEN status = 'confirmed' THEN 1 END) as confirmed,
      COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled,
      COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed
    FROM appointments
  `);

  if (statsResult.rows.length > 0) {
    stats = statsResult.rows[0];
  }
} catch (error) {
  console.error('Error conectando a la base de datos:', error);
} finally {
  await client.end();
}

// Funci√≥n para formatear fecha
function formatDate(dateString: string) {
  return new Date(dateString).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
}

// Funci√≥n para obtener color del estado
function getStatusColor(status: string) {
  switch (status) {
    case 'pending':
      return 'bg-yellow-100 text-yellow-800';
    case 'confirmed':
      return 'bg-green-100 text-green-800';
    case 'cancelled':
      return 'bg-red-100 text-red-800';
    case 'completed':
      return 'bg-blue-100 text-blue-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
}

// Funci√≥n para obtener texto del estado
function getStatusText(status: string) {
  switch (status) {
    case 'pending':
      return 'Pendiente';
    case 'confirmed':
      return 'Confirmada';
    case 'cancelled':
      return 'Cancelada';
    case 'completed':
      return 'Completada';
    default:
      return 'Desconocido';
  }
}
---

<AdminLayout
  title="Gesti√≥n de Citas"
  description="Administra todas las citas y reuniones"
>
  <div class="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">
              üìÖ Gesti√≥n de Citas
            </h1>
            <p class="text-gray-600 mt-1">
              Administra todas las citas y reuniones del sistema
            </p>
          </div>
          <div class="flex items-center space-x-4">
            <a
              href="/admin"
              class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
            >
              ‚Üê Volver al Dashboard
            </a>
          </div>
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Estad√≠sticas -->
      <div class="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-3 rounded-full bg-blue-100 text-blue-600">
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                ></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total</p>
              <p class="text-2xl font-semibold text-gray-900">{stats.total}</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Pendientes</p>
              <p class="text-2xl font-semibold text-gray-900">
                {stats.pending}
              </p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-3 rounded-full bg-green-100 text-green-600">
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Confirmadas</p>
              <p class="text-2xl font-semibold text-gray-900">
                {stats.confirmed}
              </p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-3 rounded-full bg-red-100 text-red-600">
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Canceladas</p>
              <p class="text-2xl font-semibold text-gray-900">
                {stats.cancelled}
              </p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-3 rounded-full bg-blue-100 text-blue-600">
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Completadas</p>
              <p class="text-2xl font-semibold text-gray-900">
                {stats.completed}
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Filtros -->
      <div class="bg-white rounded-lg shadow mb-8">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-xl font-semibold text-gray-900">
            üîç Filtros y B√∫squeda
          </h2>
        </div>
        <div class="p-6">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Estado</label
              >
              <select
                id="statusFilter"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Todos los estados</option>
                <option value="pending">Pendientes</option>
                <option value="confirmed">Confirmadas</option>
                <option value="cancelled">Canceladas</option>
                <option value="completed">Completadas</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Fecha Desde</label
              >
              <input
                type="date"
                id="dateFrom"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Fecha Hasta</label
              >
              <input
                type="date"
                id="dateTo"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2"
                >Buscar</label
              >
              <input
                type="text"
                id="searchInput"
                placeholder="Nombre, email..."
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          <div class="mt-4 flex space-x-4">
            <button
              onclick="applyFilters()"
              class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium transition-colors"
            >
              üîç Aplicar Filtros
            </button>
            <button
              onclick="clearFilters()"
              class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md font-medium transition-colors"
            >
              üóëÔ∏è Limpiar
            </button>
            <button
              onclick="exportAppointments()"
              class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md font-medium transition-colors"
            >
              üìä Exportar
            </button>
          </div>
        </div>
      </div>

      <!-- Lista de Citas -->
      <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-xl font-semibold text-gray-900">
            üìã Lista de Citas ({appointments.length})
          </h2>
        </div>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Cliente
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Fecha y Hora
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Servicio
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Estado
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {
                appointments.map((appointment) => (
                  <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div class="text-sm font-medium text-gray-900">
                          {appointment.clientName}
                        </div>
                        <div class="text-sm text-gray-500">
                          {appointment.clientEmail}
                        </div>
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm text-gray-900">
                        {formatDate(appointment.appointmentDate)}
                      </div>
                      <div class="text-sm text-gray-500">
                        {appointment.appointmentTime}
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm text-gray-900">
                        {appointment.serviceType}
                      </div>
                      {appointment.notes && (
                        <div class="text-sm text-gray-500 max-w-xs truncate">
                          {appointment.notes}
                        </div>
                      )}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span
                        class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(appointment.status)}`}
                      >
                        {getStatusText(appointment.status)}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div class="flex space-x-2">
                        <button
                          onclick={`viewAppointment('${appointment.id}')`}
                          class="text-blue-600 hover:text-blue-900"
                        >
                          üëÅÔ∏è Ver
                        </button>
                        {appointment.status === 'pending' && (
                          <>
                            <button
                              onclick={`confirmAppointment('${appointment.id}')`}
                              class="text-green-600 hover:text-green-900"
                            >
                              ‚úÖ Confirmar
                            </button>
                            <button
                              onclick={`cancelAppointment('${appointment.id}')`}
                              class="text-red-600 hover:text-red-900"
                            >
                              ‚ùå Cancelar
                            </button>
                          </>
                        )}
                        {appointment.status === 'confirmed' && (
                          <button
                            onclick={`completeAppointment('${appointment.id}')`}
                            class="text-blue-600 hover:text-blue-900"
                          >
                            ‚úÖ Completar
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>
      </div>

      {
        appointments.length === 0 && (
          <div class="text-center py-12">
            <svg
              class="mx-auto h-12 w-12 text-gray-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
              />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No hay citas</h3>
            <p class="mt-1 text-sm text-gray-500">
              No se encontraron citas con los filtros aplicados.
            </p>
          </div>
        )
      }
    </div>
  </div>

  <script define:vars={{ appointments }}>
    // Variables globales
    let allAppointments = appointments;
    let filteredAppointments = [...allAppointments];

    // Funci√≥n para aplicar filtros
    function applyFilters() {
      const statusFilter = document.getElementById('statusFilter').value;
      const dateFrom = document.getElementById('dateFrom').value;
      const dateTo = document.getElementById('dateTo').value;
      const searchInput = document
        .getElementById('searchInput')
        .value.toLowerCase();

      filteredAppointments = allAppointments.filter((appointment) => {
        // Filtro por estado
        if (statusFilter && appointment.status !== statusFilter) {
          return false;
        }

        // Filtro por fecha
        if (
          dateFrom &&
          new Date(appointment.appointmentDate) < new Date(dateFrom)
        ) {
          return false;
        }
        if (
          dateTo &&
          new Date(appointment.appointmentDate) > new Date(dateTo)
        ) {
          return false;
        }

        // Filtro por b√∫squeda
        if (searchInput) {
          const searchText =
            `${appointment.clientName} ${appointment.clientEmail} ${appointment.serviceType}`.toLowerCase();
          if (!searchText.includes(searchInput)) {
            return false;
          }
        }

        return true;
      });

      updateTable();
    }

    // Funci√≥n para limpiar filtros
    function clearFilters() {
      document.getElementById('statusFilter').value = '';
      document.getElementById('dateFrom').value = '';
      document.getElementById('dateTo').value = '';
      document.getElementById('searchInput').value = '';
      filteredAppointments = [...allAppointments];
      updateTable();
    }

    // Funci√≥n para actualizar la tabla
    function updateTable() {
      const tbody = document.querySelector('tbody');
      tbody.innerHTML = '';

      if (filteredAppointments.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="5" class="px-6 py-4 text-center text-gray-500">
              No se encontraron citas con los filtros aplicados.
            </td>
          </tr>
        `;
        return;
      }

      filteredAppointments.forEach((appointment) => {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50';
        row.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap">
            <div>
              <div class="text-sm font-medium text-gray-900">${appointment.clientName}</div>
              <div class="text-sm text-gray-500">${appointment.clientEmail}</div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">${formatDate(appointment.appointmentDate)}</div>
            <div class="text-sm text-gray-500">${appointment.appointmentTime}</div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="text-sm text-gray-900">${appointment.serviceType}</div>
            ${appointment.notes ? `<div class="text-sm text-gray-500 max-w-xs truncate">${appointment.notes}</div>` : ''}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(appointment.status)}">
              ${getStatusText(appointment.status)}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
            <div class="flex space-x-2">
              <button onclick="viewAppointment('${appointment.id}')" class="text-blue-600 hover:text-blue-900">
                üëÅÔ∏è Ver
              </button>
              ${
                appointment.status === 'pending'
                  ? `
                <button onclick="confirmAppointment('${appointment.id}')" class="text-green-600 hover:text-green-900">
                  ‚úÖ Confirmar
                </button>
                <button onclick="cancelAppointment('${appointment.id}')" class="text-red-600 hover:text-red-900">
                  ‚ùå Cancelar
                </button>
              `
                  : ''
              }
              ${
                appointment.status === 'confirmed'
                  ? `
                <button onclick="completeAppointment('${appointment.id}')" class="text-blue-600 hover:text-blue-900">
                  ‚úÖ Completar
                </button>
              `
                  : ''
              }
            </div>
          </td>
        `;
        tbody.appendChild(row);
      });

      // Actualizar contador
      document.querySelector('h2').textContent =
        `üìã Lista de Citas (${filteredAppointments.length})`;
    }

    // Las funciones de utilidad est√°n definidas en la secci√≥n de Astro arriba

    // Funciones de acciones
    async function viewAppointment(id: string) {
      // Implementar modal de vista detallada
      alert(`Ver cita ${id} - Implementar modal`);
    }

    async function confirmAppointment(id: string) {
      if (confirm('¬øConfirmar esta cita?')) {
        try {
          const response = await fetch(`/api/appointments/${id}/confirm`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          if (response.ok) {
            alert('Cita confirmada exitosamente');
            location.reload();
          } else {
            alert('Error al confirmar la cita');
          }
        } catch (error) {
          alert('Error: ' + error.message);
        }
      }
    }

    async function cancelAppointment(id: string) {
      if (confirm('¬øCancelar esta cita?')) {
        try {
          const response = await fetch(`/api/appointments/${id}/cancel`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          if (response.ok) {
            alert('Cita cancelada exitosamente');
            location.reload();
          } else {
            alert('Error al cancelar la cita');
          }
        } catch (error) {
          alert('Error: ' + error.message);
        }
      }
    }

    async function completeAppointment(id: string) {
      if (confirm('¬øMarcar esta cita como completada?')) {
        try {
          const response = await fetch(`/api/appointments/${id}/complete`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          if (response.ok) {
            alert('Cita marcada como completada');
            location.reload();
          } else {
            alert('Error al completar la cita');
          }
        } catch (error) {
          alert('Error: ' + error.message);
        }
      }
    }

    async function exportAppointments() {
      try {
        const response = await fetch('/api/appointments/export', {
          method: 'GET',
        });

        if (response.ok) {
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `citas-${new Date().toISOString().split('T')[0]}.csv`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
        } else {
          alert('Error al exportar las citas');
        }
      } catch (error) {
        alert('Error: ' + error.message);
      }
    }

    // Event listeners
    document
      .getElementById('searchInput')
      .addEventListener('input', applyFilters);
    document
      .getElementById('statusFilter')
      .addEventListener('change', applyFilters);
    document
      .getElementById('dateFrom')
      .addEventListener('change', applyFilters);
    document.getElementById('dateTo').addEventListener('change', applyFilters);
  </script>
</AdminLayout>
