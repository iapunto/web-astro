import type { APIRoute } from 'astro';
import OAuth2Service from '../../../lib/services/oauth2Service.js';

export const GET: APIRoute = async () => {
  try {
    console.log('üß™ ===== PRUEBA OAUTH2 =====');

    const oauth2Service = new OAuth2Service();
    
    // 1. Verificar configuraci√≥n OAuth2
    console.log('1Ô∏è‚É£ Verificando configuraci√≥n OAuth2...');
    const clientId = process.env.GOOGLE_CLIENT_ID;
    const clientSecret = process.env.GOOGLE_CLIENT_SECRET;
    const redirectUri = process.env.GOOGLE_REDIRECT_URI;

    const oauth2Config = {
      clientId: clientId ? '‚úÖ Configurado' : '‚ùå No configurado',
      clientSecret: clientSecret ? '‚úÖ Configurado' : '‚ùå No configurado',
      redirectUri: redirectUri ? '‚úÖ Configurado' : '‚ùå No configurado',
    };

    // 2. Verificar tokens existentes
    console.log('2Ô∏è‚É£ Verificando tokens existentes...');
    const tokensLoaded = oauth2Service.setTokensFromEnv();
    const authStatus = oauth2Service.getAuthStatus();

    // 3. Verificar conexi√≥n si hay tokens
    console.log('3Ô∏è‚É£ Verificando conexi√≥n...');
    let connectionStatus = 'No probado';
    let calendarInfo = null;

    if (tokensLoaded) {
      try {
        const isConnected = await oauth2Service.verifyConnection();
        connectionStatus = isConnected ? '‚úÖ Conectado' : '‚ùå Fall√≥';
        
        if (isConnected) {
          const userInfo = await oauth2Service.getUserInfo();
          calendarInfo = {
            userEmail: userInfo?.email,
            userName: userInfo?.name,
            userPicture: userInfo?.picture
          };
        }
      } catch (error) {
        connectionStatus = `‚ùå Error: ${error instanceof Error ? error.message : 'Error desconocido'}`;
      }
    } else {
      connectionStatus = '‚ö†Ô∏è No hay tokens configurados';
    }

    // 4. Generar URL de autorizaci√≥n
    console.log('4Ô∏è‚É£ Generando URL de autorizaci√≥n...');
    const authUrl = oauth2Service.generateAuthUrl();

    return new Response(JSON.stringify({
      success: true,
      message: 'Prueba OAuth2 completada',
      timestamp: new Date().toISOString(),
      results: {
        oauth2Config,
        authStatus,
        connectionStatus,
        calendarInfo,
        authUrl: authUrl,
        instructions: [
          tokensLoaded ? 
            '‚úÖ OAuth2 est√° configurado y funcionando' :
            'üìã Para configurar OAuth2:',
          tokensLoaded ? 
            'üîë Los tokens est√°n listos para usar' :
            '1. Visita la URL de autorizaci√≥n generada',
          tokensLoaded ? 
            'üìÖ Puedes crear eventos con invitados' :
            '2. Inicia sesi√≥n con tu cuenta de Google',
          tokensLoaded ? 
            'üìß Las invitaciones se enviar√°n autom√°ticamente' :
            '3. Concede permisos para Google Calendar',
          tokensLoaded ? 
            '' :
            '4. Ser√°s redirigido de vuelta con tokens'
        ].filter(Boolean),
        nextSteps: tokensLoaded ? [
          'Usa /api/calendar/book-oauth2 para crear citas',
          'Los eventos incluir√°n invitados autom√°ticamente',
          'Las invitaciones se enviar√°n por email'
        ] : [
          'Configura las credenciales OAuth2 en Google Cloud Console',
          'Ejecuta el flujo de autenticaci√≥n',
          'Guarda los tokens en las variables de entorno'
        ]
      }
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('‚ùå Error en prueba OAuth2:', error);
    
    return new Response(JSON.stringify({
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
      timestamp: new Date().toISOString(),
      recommendations: [
        'Verifica la configuraci√≥n OAuth2 en Google Cloud Console',
        'Aseg√∫rate de que las variables de entorno est√©n configuradas',
        'Revise los logs del servidor para m√°s detalles'
      ]
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
};
